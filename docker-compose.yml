# Docker Compose for WHIX Game Development
# Provides local alternatives to production services

services:
  # PostgreSQL Database (mimicking Neon)
  postgres:
    image: postgres:16-alpine
    container_name: whix-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: whixgame
      # This will be available to containers in the same network
      DATABASE_URL_DOCKER: postgresql://postgres:postgres@postgres:5432/whixgame
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5478:5432"  # Creative port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for local blob storage (Vercel Blob alternative)
  minio:
    image: minio/minio:latest
    container_name: whix-minio-dev
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      # Note: Buckets must be created via application code on first use
      # MinIO doesn't support auto-creating buckets via env vars
    volumes:
      - minio_data:/data
    ports:
      - "9100:9000"     # API port (creative)
      - "9101:9001"     # Console port (creative)
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Drizzle Studio for database management
  drizzle-studio:
    image: node:22-alpine
    container_name: whix-drizzle-studio
    restart: unless-stopped
    working_dir: /app
    ports:
      - "4983:4983"  # Default Drizzle Studio port
    volumes:
      - ./:/app:ro
      - ./drizzle:/app/drizzle:ro
      - ./lib/db:/app/lib/db:ro
    environment:
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/whixgame?schema=public"
    command: sh -c "npm install && npm run db:studio"
    depends_on:
      postgres:
        condition: service_healthy

  # Mailhog for email testing (if you add email features)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: whix-mailhog-dev
    restart: unless-stopped
    ports:
      - "1026:1025"     # SMTP port (creative)
      - "8026:8025"     # Web UI port (creative)

  # Redis for caching/sessions (optional - uncomment when needed)
  # Note: Redis integration not yet implemented in the application
  # When implementing Redis, ensure to handle connection in application code
  # redis:
  #   image: redis:7-alpine
  #   container_name: whix-redis-dev
  #   restart: unless-stopped
  #   ports:
  #     - "6385:6379"  # Creative port
  #   volumes:
  #     - redis_data:/data
  #   command: redis-server --save 20 1 --loglevel warning

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  default:
    name: whix_dev_network